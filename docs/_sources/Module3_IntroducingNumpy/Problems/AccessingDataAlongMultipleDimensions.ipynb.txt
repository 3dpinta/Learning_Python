{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# RUN THIS CELL\n",
    "from grader import grade_3d_index\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Indexing a 3D array\n",
    "Use the following code to initialize the 3-dimensional array `x`:\n",
    "\n",
    "```python\n",
    "import numpy as np\n",
    "x = np.arange(27).reshape(3,3,3)\n",
    "```\n",
    "```\n",
    "array([[[ 0,  1,  2],\n",
    "        [ 3,  4,  5],\n",
    "        [ 6,  7,  8]],\n",
    "\n",
    "       [[ 9, 10, 11],\n",
    "        [12, 13, 14],\n",
    "        [15, 16, 17]],\n",
    "\n",
    "       [[18, 19, 20],\n",
    "        [21, 22, 23],\n",
    "        [24, 25, 26]]])\n",
    "```\n",
    "\n",
    "In the following questions, you will be asked to access specific items od sub-arrays within `x`, using indexing and slicing. You will be asked to provide your answer in the form of a function. \n",
    "\n",
    "For example, if you were asked to access the element `0` in the array, your solution would simply be:\n",
    "```python\n",
    "def solution_example(x):\n",
    "    return x[0, 0, 0]\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Given `x`, write a function that uses indexes and/or slices to return the 2D sub-array:\n",
    "\n",
    "```python\n",
    "array([[0, 1, 2],\n",
    "       [3, 4, 5],\n",
    "       [6, 7, 8]])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def solution_1(x):\n",
    "    # Delete `pass` and include your solution here\n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grading problem # 1:...\n",
      "\n",
      "TEST FAILED: Your function returned `None`. \n",
      "Make sure that you have included a `return` statement in your function.\n"
     ]
    }
   ],
   "source": [
    "# Run this cell to grade your solution\n",
    "grade_3d_index(solution_1, problem_no=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "2) Given `x`, write a function that uses indexes and/or slices to return the 2D sub-array:\n",
    "\n",
    "```python\n",
    "array([[ 0,  3,  6],\n",
    "       [ 9, 12, 15],\n",
    "       [18, 21, 24]])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def solution_2(x):\n",
    "    # Delete `pass` and include your solution here\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Run this cell to grade your solution\n",
    "grade_3d_index(solution_2, problem_no=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "3) Given `x`, write a function that uses indexes and/or slices to return the 2D sub-array:\n",
    "\n",
    "```python\n",
    "array([[1, 2],\n",
    "       [4, 5]])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def solution_3(x):\n",
    "    # Delete `pass` and include your solution here\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Run this cell to grade your solution\n",
    "grade_3d_index(solution_3, problem_no=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "4) Given `x`, write a function that uses indexes and/or slices to return the 3D sub-array:\n",
    "\n",
    "```python\n",
    "array([[[18, 19, 20],\n",
    "        [21, 22, 23],\n",
    "        [24, 25, 26]],\n",
    "\n",
    "       [[ 9, 10, 11],\n",
    "        [12, 13, 14],\n",
    "        [15, 16, 17]],\n",
    "\n",
    "       [[ 0,  1,  2],\n",
    "        [ 3,  4,  5],\n",
    "        [ 6,  7,  8]]])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solution_4(x):\n",
    "    # Delete `pass` and include your solution here\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Run this cell to grade your solution\n",
    "grade_3d_index(solution_4, problem_no=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "5) Given `x`, write a function that uses indexes and/or slices to return the 2D sub-array:\n",
    "\n",
    "```python\n",
    "array([[ 0,  1,  2],\n",
    "       [18, 19, 20]])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solution_5(x):\n",
    "    # Delete `pass` and include your solution here\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Run this cell to grade your solution\n",
    "grade_3d_index(solution_5, problem_no=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "6) Given `x`, write a function that uses indexes and/or slices to return the number:\n",
    "\n",
    "```python\n",
    "17\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solution_6(x):\n",
    "    # Delete `pass` and include your solution here\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Run this cell to grade your solution\n",
    "grade_3d_index(solution_6, problem_no=6)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
