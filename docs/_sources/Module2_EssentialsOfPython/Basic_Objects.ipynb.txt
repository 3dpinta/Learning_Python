{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic Python Objects\n",
    "You will see the term \"object\" be used frequently throughout this text. In Python, \"object\" is quite the catch-all term; including numbers, strings, lists, functions - a Python object is essentially anything that you assign a variable to. The different types of objects naturally have different uses and different built-in functions available to them. Here, we will review some of the most common objects that are built-in to Python.\n",
    "\n",
    "The built-in function `isinstance` will allow us to check if an object is of a given type. For example, this code checks if an object is an integer:\n",
    "\n",
    "```python\n",
    ">>> x = 1  # assign the variable `x` to the integer-object 1\n",
    "\n",
    "# checking that `x` is an integer\n",
    ">>> isinstance(x, int)\n",
    "True\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Numbers\n",
    "Python has three basic types of numbers: integers, \"floating point\" numbers, and complex numbers. \n",
    "\n",
    "### Integers\n",
    "As in traditional mathematics, an integer is any \"whole\" number: $\\dots, -3, -2, -1, 0, 1, 2, 3, \\dots$. \n",
    "\n",
    "You can create as large an integer as you'd like, Python will allocate as much memory as needed (and ultimately, as is available) to store an integer:\n",
    "\n",
    "```python\n",
    "# you can make an integer as large as you'd like\n",
    ">>> large_int = 281938481039848500192847576920\n",
    "```\n",
    "\n",
    "A floating point number, often referred to as a \"float\", is the only term in this list that isn't seen in traditional mathematics. In essence, a \"float\" can represent any number on the number-line, up to a limited number of decimal places. This issue of representing a number only up to a certain level of numerical precision is non-trivial, and is why we use the phrase \"floating point number\" instead of \"real-valued number\". Ultimately  In Python, every float has a decimal specified:\n",
    "\n",
    "\n",
    "\n",
    "In mathematics, complex number is a number with the form: $a + bi$, where $a$ and $b$ are real-valued numbers, and $i$ is defined to be the number that satisfies the relationship $i^2 = -1$. Because no real-valued number satisfies this relationship, $i$ is called the \"imaginary number\". Weirdo electrical engineers use the symbol $j$ in place of $i$, which is why Python would display the complex number $2 + 3i$ as `2+3j`.  \n",
    "\n",
    "- `int`: can represent any integer-value on the real-number line: $\\dots, -3, -2, -1, 0, 1, 2, 3, \\dots$\n",
    "- `float`: can represent any fractional-valued number, up to a limited number of decimal places of precision: $-12.3428$\n",
    "- `complex`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1. == 1. + 10**(-23)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\"> \n",
    "\n",
    "**Complex numbers**:  \n",
    "\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "can't convert complex to float",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-abc71651b722>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mfloat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;36m0j\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: can't convert complex to float"
     ]
    }
   ],
   "source": [
    "float(2+0j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
