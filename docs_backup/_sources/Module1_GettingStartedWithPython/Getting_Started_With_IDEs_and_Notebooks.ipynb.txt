{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setting Up a Development Environment\n",
    "## What You Will Learn\n",
    "- An IDE is a sophisticated text editors that allow you edit, run, and debug code. These are optional for the course.\n",
    "- Python shell is an interface for typing Python code and executing it directly in your computer's terminal.\n",
    "- IPython shell is a much nicer version of the shell - it provides syntax highlighting, autocompletion, and other features.\n",
    "- Jupyter notebook is a powerful tool for prototyping and experimenting with code, as well as visualizing data and writing nicely-formatted text. We will be using this throughout the course."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Integrated Development Environments\n",
    "In Section 1 of this module, we learned that a Python script is simply a text file that contains Python code. Beyond typically using a `.py` suffix for the filename, there is nothing that differentiates this sort of file from any other text file. That being said, it is not a good idea to use a simple text editor to write Python code (and it is a **terrible** idea to use word-processing software, like Microsoft Word, to do so). Insted we want an \"integrated development environment\" (IDE) that will facilitate our code writing. \n",
    "\n",
    "First and foremost, a good IDE will provide a text editor that will:\n",
    "\n",
    "- check your code for syntax errors (a misspelled function name, a reference to an undefined variable, etc)\n",
    "- colorize your code so that it is easy to distinguish, for instance, numbers from character strings.\n",
    "- enable you to easily look up documentation and definitions for functions that you are using.\n",
    "- autocomplete the names of variables and functions as you are typing them.\n",
    "\n",
    "An IDE also often provides debugging tools so that you can test your code; it will also typically interface with version-control software, like Git, so that you can keep track of versions of your code as you modify it. We will not discuss these useful, but more advanced features here.\n",
    "\n",
    "### Recommended IDEs\n",
    "There are many excellent IDEs that can be configured to work well with Python. Two IDEs that we endorse are:\n",
    " \n",
    "[PyCharm](https://www.jetbrains.com/pycharm/download): A powerful IDE dedicated to Python.\n",
    "\n",
    "**Pros**\n",
    "\n",
    "- works well out-of-the-box\n",
    "- supported by professionals and thus is very reliable\n",
    "- highly configurable\n",
    "- fully-featured\n",
    "\n",
    "**Cons**\n",
    "\n",
    " - can be resource-heavy, especially for a laptop\n",
    " - may be overwhelming to new users (but has good documentation and tutorials)\n",
    " \n",
    "[Visual Studio Code](https://code.visualstudio.com/) with the [Python extension](https://code.visualstudio.com/docs/languages/python): A lightweight, highly customizable IDE.\n",
    "\n",
    "**Pros**\n",
    "\n",
    "- lightweight and elegant \n",
    "- works with many different languages, so you only need to familiarize yourself with one IDE\n",
    "- a huge number of extensions can be downloaded to add functionality to the editor, these are created by a large community of open-source developers.\n",
    "\n",
    "**Cons**\n",
    "\n",
    "- currently less polished and powerful than PyCharm\n",
    "- can require some tinkering to get features working\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Takeaway**:\n",
    "\n",
    "Integrated Development Environments (IDEs) provide powerful tools for helping you write well-formatted and typo-free code. We recommend using PyCharm Community Edition or Visual Studio Code (with the Python extension installed) for your Python IDE. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Python Console\n",
    "It is slow to tinker with Python code by writing a script and then executing it. Instead, a simple way to try out Python is to open a Python \"console\" in your terminal. To do so, open your computer's terminal (cmd.exe in Windows) and simply type: python. You should see something like:\n",
    "\n",
    "![Python console example](attachments/PythonShellClip.PNG)\n",
    "\n",
    "appear in your terminal. You can run any Python command here. Try typing `print(\"Hello World\")` into the console (and then hit RETURN/ENTER). You will see Hello World print to your terminal. You just executed some Python code! A console session has \"memory\" of the commands that you type. For instance, if you run the line of code `x = 5` in the console, then the variable `x` will reference the value 5 until you close this console session (or you delete or reassign `x`). \n",
    "\n",
    "\n",
    "Exit the Python shell by executing the command `exit()`. The Python console is a simple but valuable tool, that would come with Python even if you didn't install Python via Anaconda. There is, however, a far-superior console that comes with the Anaconda distibution of packages that you installed, called IPython."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The IPython Console\n",
    "\n",
    "The IPython console (**Interactive** Python console) provides a much nicer shell than the vanilla one described in the preceding section. If you have installed Anaconda, then you can simply execute the command `ipython` in your terminal to begin an IPython console session (make sure that you have exited from the Python console you may have opened in the preceding section):\n",
    "\n",
    "![IPython console example](attachments/IPythonClip.PNG)\n",
    "\n",
    "IPython can perform autocompletion when you are typing known commands and names. Try typing `pri` and then hit the `<TAB>` key. `pri` should autocomplete to `print`. This autocompletion works with any defined Python variables or function names, including ones that you have defined yourself. Writing code is greatly expedited by autocompletion. This is also useful when you can't remember the exact name of a variable hitting `<TAB>` will bring up a list of possible variable names, given what you have typed.\n",
    "\n",
    "Notice, also, that `print` appears in a colored font - this is because it is a built-in function in Python. IPython color-codes text to disambiguate built-in function names, strings of characters, numbers, and other common objects that will appear in your code. This greatly enhances the readability of code. \n",
    "\n",
    "If you type `print(\"Hello World\")`, you will also notice that the parentheses are highlighted when your cursor is on one of them - IPython will highlight pairs of parentheses (and other types of brackets and quotation marks) so that you can easily see if you have a mismatch.\n",
    "\n",
    "Exit the IPython shell by executing the command `exit()`.\n",
    "\n",
    "The IPython console is superior to the \"vanilla\" console that comes with Python in nearly every way. We have only scratched the surface of its capabilities. Read about IPython's other capabilities [here](http://ipython.readthedocs.io/en/stable/interactive/tutorial.html).\n",
    "\n",
    "The IPython shell is a great tool for quickly prototyping and testing small chunks of Python code. Jupyter Notebook is an even more powerful tool for quickly writing and running Python code.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jupyter Notebook\n",
    "A Jupyter Notebook is similar to the IPython shell in that it provides an interface for running Python code. However, a \"notebook\" will actually open up in your web browser (e.g., Firefox, Chrome, or Safari--whichever is your default). Although it opens in your browser, **everything is happening locally on your machine**. You don't need to be connected to the internet to work on a Jupyter notebook!\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Takeaway**:\n",
    "\n",
    "Although you will open Jupyter notebooks using an internet browser, everything is occuring locally on your machine (i.e. no internet connection is needed). \n",
    "</div>\n",
    "\n",
    "### Running a Notebook Server & Taking a Tour\n",
    "In your terminal, navigate to a directory (a.k.a folder) that you are okay creating files in. If you don't know how to do this, Google it!\n",
    "\n",
    "Once you are in the desired directory, type in your terminal: `jupyter notebook`\n",
    "You should see some text appear in your terminal:\n",
    "\n",
    "![Starting a jupyter notebook server on your machine](attachments/jupyter_login.PNG)\n",
    "\n",
    "This is a \"notebook server\" that is running on your machine - it basically handles all of the communication between your browser and your machine. A new window or tab should open in your web browser, which looks like a file explorer. You can use this to enter subdirectories and to open up any Jupyter notebooks that you have saved.\n",
    "\n",
    "In the top-right corner of this window, click on the dropdown menu labeled \"New\", and select the option `Python [conda root]`.\n",
    "\n",
    "A new tab will open in your browser, revealing a \"Jupyter notebook\" called `Untitled.ipynb` running a Python kernel. The commands that you run in this notebook are interpreted and executed by Python in the essentially same way that they would be in a script or in a console. \n",
    "\n",
    "### Notebook Cells \n",
    "Whereas a Python console only allows you to work on one line of code at a time, a notebook allows you to write code within \"cells\" and to execute these chunks of code cell-by-cell. In the first cell, write the lines of code:\n",
    "\n",
    "```python\n",
    "x = 3\n",
    "y = 4\n",
    "```\n",
    "then press `<SHIFT>+<RETURN>`. This will execute all of the code within the given cell (in this instance, assigning the variables `x` and `y` with the values 3 and 4, respectively) and then creates a new cell below. In the next cell type the code:\n",
    "\n",
    "```python\n",
    "x + y\n",
    "```\n",
    "and hit `<SHIFT>+<RETURN>` to execute this code. The number 7 will appear beneath the cell - this, of course, is the value that is returned when `3 + 4` is evaluated: \n",
    "\n",
    "![jupyter notebook example](attachments/jupyter_early.png)\n",
    "\n",
    "Notice that the notebook \"knows\" about its variables across its cells. This doesn't just work from top to bottom - you can define `z = 2` in the third cell, and then execute code that references `z` in the first cell. What really matters is the *order* in which the cells are executed. Notice that `In[1]` denotes that the top cell with the first input-cell executed in the notebook, and `In[2]` denotes the second cell that was executed. Formally, the cells within a given notebook share a common \"namespace\" of all the variable names that have been defined in the notebook. Separate notebooks are completely independent from one another. \n",
    "\n",
    "A major value of using a notebook is that you can rapidly edit these cells (say, change `x = 3` to  `x = 10`), and re-execute them to nimbly tinker with whatever code you are developing. Although simple, this is a hugely powerful environment for prototyping code. \n",
    "\n",
    "### Familiarizing Yourself with Jupyter notebooks\n",
    "\n",
    "While in a notebook, on the toolbar at the top of the notebook, click on *Help* and then *User Interface Tour*.\n",
    "\n",
    "- Work through the brief tour.\n",
    "\n",
    "- Next, click on Help and then Keyboard shortcuts.\n",
    "\n",
    "- Take some time to familiarize yourself with commands that allow you to: run code, insert cells above & below, and delete cells.\n",
    "\n",
    "<div class=\"alert alert-warning\">\n",
    "\n",
    "**Note**:\n",
    "\n",
    "You can \"reset the notebook's kernel\" in order to interrupt and \"reset\" your notebook: its written contents will still there, but it will be as if none of its code has been run and no variables are defined. Press `<ESC>-0-0` to bring up a prompt to reset the kernel. \n",
    "</div>\n",
    "\n",
    "### Notebooks for Visualizing Data and Sharing Information\n",
    "Jupyter notebooks can do much more than run Python code. They can be used to render HTML and Markdown (a lightweight markup language that allows you to write plain text with some stylized elements). You can embed images, videos, and audio in notebooks, and plots of data render nicely beneath cells. This functionality has made Jupyter notebooks wildly popular for use among data scientists, researchers, and other people who want to create, analyze, and share numerical results with one another.\n",
    "\n",
    "By default, every cell is in \"Code\" mode - it expects Python code, and will run any code within it. The cell can also be set to \"Markdown\" mode. Markdown is a lightweight markup language that allows you to write plain text with some stylized elements. If you ever want to write a substantial amount of documentation or explanation about your code, you can set a cell to Markdown mode and type in it as if it were a text editor. \"Running\" a markdown cell will render the text you wrote.\n",
    "\n",
    "<div class=\"alert alert-warning\">\n",
    "\n",
    "**Note**:\n",
    "\n",
    "If you ever find that your Python code isn't being formatted properly, and doesn't run at all when you execute the cell (you get no output, not even errors), there is a good chance that you have accidentally set the cell to 'Markdown' mode! Change it back to 'Code' mode by pressing `<ESC>-Y` when the cell is selected.\n",
    "</div>\n",
    "\n",
    "\n",
    "### Some Bells and Whistles\n",
    "Jupyter notebook provides nice, basic utilities for editing code:\n",
    "- Autocompletion: Hit `<TAB>` as you are typing in an existing function or variable name \n",
    "- Color-coding built-in functions, strings of characters, and numbers\n",
    "- Bringing up documentation for functions\n",
    "    - In a cell (set to Code mode), type `sum` and then press `<SHIFT>+<TAB>` when your text cursor is still on `sum`. \n",
    "    - This will bring up the documentation for the built-in Python function sum. \n",
    "    - `<SHIFT>-<TAB>-<TAB>` (holding SHIFT, tap TAB twice) will open an extended window to show the full documentation. \n",
    "    - This works with any function that has a \"docstring\" defined for it - even ones that you write yourself. This is an excellent way to quickly look up the documentation for any function/object in Python.  Pressing ESC will close the window."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
